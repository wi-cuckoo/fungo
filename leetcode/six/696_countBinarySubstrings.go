/*
给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的
所有0和所有1都是组合在一起的。
重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。
请注意，一些重复出现的子串要计算它们出现的次数。
另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。

示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。
注意：

s.length 在1到50,000之间。
s 只包含“0”或“1”字符。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-binary-substrings
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

package six

import "github.com/wi-cuckoo/fungo/util"

// 字符串中 0 和 1 交替出现，考虑一个典型的子串如：00111，它能组成符合要求的子串则为
// 01，0011。由此可以看出其结果的数量取决于 0，1 数量小的那一个（2个0，3个1）
// 因此对于整个字符串，我们只需要计算当前数字的数量并于上一个不同数字的数量对比就知道
// 该段所获得的结果子串数量，累加每一段即为最后结果

func countBinarySubstrings(s string) int {
	if len(s) == 0 {
		return 0
	}
	ans := 0
	i, j, pre := 0, 0, 0
	for j = 0; j < len(s); j++ {
		if s[j] == s[i] {
			continue
		}
		ans += util.Min(pre, j-i)
		i, pre = j, j-i
	}
	return ans + util.Min(pre, j-i)
}
